{"version":3,"sources":["services/ratings.js","services/books.js","components/Book.js","components/Notification.js","components/LoginForm.js","components/RegisterForm.js","components/Togglable.js","components/Footer.js","components/Filter.js","components/Logout.js","services/login.js","services/users.js","App.js","index.js"],"names":["token","create","newObject","a","config","headers","Authorization","axios","post","response","data","error","setToken","newToken","baseUrl","getAll","get","getBook","id","reqString","console","log","Book","book","logout","setErrorMessage","setBooks","books","useState","rate","setRate","onSubmitRate","event","preventDefault","ratingService","BookId","rating","setTimeout","bookService","newBook","newBooks","map","className","name","author","year","toFixed","numRatings","onSubmit","value","onChange","target","type","Notification","message","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","RegisterForm","handleNameChange","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","children","displayName","Footer","color","fontStyle","fontSize","Filter","filter","handler","Logout","handleLogout","login","credentials","validToken","App","setFilter","showAll","setShowAll","errorMessage","setName","setUsername","setPassword","user","setUser","useEffect","then","initialBooks","loggedUserJSON","window","localStorage","getItem","JSON","parse","loginService","handleLogin","setItem","stringify","handleRegister","userService","removeItem","toLowerCase","includes","undefined","ratings","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41b02e80.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/ratings'\nlet token = null\n\n/****\n* FUNCTION: const setToken = newToken\n* ARGS_IN: newToken: new token of the user\n* DESCRIPTION: Set the new token of the session\n* ARGS_OUT: -\n****/\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\n/****\n* FUNCTION: const create = async newObject\n* ARGS_IN: newObject: rating object\n* DESCRIPTION: Create a new rating\n* ARGS_OUT: Return the new rating created or the error\n****/\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  try {\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n  } catch(error) {\n    return(error.response.data.error)\n  }\n}\n\nexport default { create, setToken }","import axios from 'axios'\nconst baseUrl = '/api/books'\n\n/****\n* FUNCTION: const getAll = async ()\n* ARGS_IN: -\n* DESCRIPTION: HTTP GET that retrieves all the books\n* ARGS_OUT: response.data: The books retrieved from the response\n****/\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\n/****\n* FUNCTION: const getBook = async (id)\n* ARGS_IN: id: id of a book\n* DESCRIPTION: HTTP GET that retrieves a book from the database with the id\n*              passed as an argument\n* ARGS_OUT: response.data: The book retrieved from the response\n****/\nconst getBook = async (id) => {\n  const reqString = `${baseUrl}/${id}`\n  const response = await axios.get(reqString)\n  console.log(response.data)\n  return response.data\n}\n\nexport default { getAll, getBook }\n","import React, { useState } from 'react'\nimport ratingService from '../services/ratings'\nimport bookService from '../services/books'\n\n/****\n* COMPONENT: Book\n* ARGS_IN: book: book that renders the component\n*          logout: logout function in case tokens expire\n*          setErrorMessage: function to display messeges in the top of the screen\n*          setBooks: function to update the state of the books\n*          books: array with all the books\n* DESCRIPTION: Component that renders a book and let you submit ratings.\n* ARGS_OUT: The html code that displays the book and the rating system\n****/\nconst Book = ({ book , logout, setErrorMessage, setBooks, books }) => {\n\n  const [rate, setRate] = useState(1)\n\n  /****\n  * FUNCTION: const handleRateChange = (event)\n  * ARGS_IN: event: event that triggered it\n  * DESCRIPTION: Changes the value of the rate to the value of the event target\n  * ARGS_OUT: -\n  ****/\n  const handleRateChange = (event) => {\n    setRate(event.target.value)\n  }\n\n  /****\n  * FUNCTION: const onSubmitRate = async (event)\n  * ARGS_IN: event: event that triggered it\n  * DESCRIPTION: It adds a new rating to the book. If it is added successfully it\n  *              reloads the book ratings.\n  * ARGS_OUT: -\n  ****/\n  const onSubmitRate = async (event) => {\n    event.preventDefault()\n    setRate(1)\n    const response = await ratingService.create({ BookId: book.id, rating: rate })\n    if(response === 'token expired'){\n      setErrorMessage('Session expired')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      logout()\n    } else {\n      const newBook = await bookService.getBook(book.id)\n      console.log('Libro nuevo: ' , newBook, 'Libros: ',books)\n      const newBooks = books.map(book => {\n        if(book.id === newBook.id){\n          return newBook\n        }else{\n          return book\n        }\n      })\n      setBooks(newBooks)\n    }\n  }\n\n  return (\n    <li className='book'>\n      <p> Title: {book.name} </p>\n      <p> Author: {book.author} </p>\n      <p> Year of publishing: {book.year} </p>\n      <p> Rating: {book.rating.toFixed(1)} </p>\n      <p> Number ratings: {book.numRatings}  </p>\n\n      <p>\n        <form onSubmit={ onSubmitRate }>\n          <label>\n            Rate the book:\n            <select value={rate} onChange={handleRateChange}>\n              <option value={1}>1</option>\n              <option value={2}>2</option>\n              <option value={3}>3</option>\n              <option value={4}>4</option>\n              <option value={5}>5</option>\n            </select>\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </p>\n    </li>\n  )\n}\n\nexport default Book","import React from 'react'\n\n/****\n* COMPONENT: Notification\n* ARGS_IN: message: message to be displayed\n* DESCRIPTION: Component that displays a message\n* ARGS_OUT: The html code that displays a message\n****/\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/****\n* COMPONENT: LoginForm\n* ARGS_IN: handleSubmit: function that handles the login\n           handleUsernameChange: event handler use to update the state of the username variable\n           handlePasswordChange: event handler use to update the state of the password variable\n           username: state variable that saves the username\n           password: state variable that saves the password\n* DESCRIPTION: Component that renders login form and its handlers\n* ARGS_OUT: The html code that displays the login form\n****/\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\nexport default LoginForm","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n/****\n* COMPONENT: RegisterForm\n* ARGS_IN: handleSubmit: function that handles the login\n           handleUsernameChange: event handler use to update the state of the username variable\n           handlePasswordChange: event handler use to update the state of the password variable\n           handleNameChange: event handler use to update the state of the password variable\n           name: state variable that saves the name\n           username: state variable that saves the username\n           password: state variable that saves the password\n* DESCRIPTION: Component that renders the register form and its handlers\n* ARGS_OUT: The html code that displays the register form\n****/\nconst RegisterForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  handleNameChange,\n  name,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Register</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          name\n          <input\n            value={name}\n            onChange={handleNameChange}\n          />\n        </div>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button type=\"submit\">register</button>\n      </form>\n    </div>\n  )\n}\n\nRegisterForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  handleNameChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n}\n\nexport default RegisterForm","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\n/****\n* COMPONENT: Togglable\n* ARGS_IN: buttonLabel: the name of the button that toggles the component\n* DESCRIPTION: Component to toggle other components\n* ARGS_OUT: The html code that let you toggle and untoggle components\n****/\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.displayName = 'Togglable'\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import React from 'react'\n\n/****\n* COMPONENT: Footer\n* ARGS_IN: -\n* DESCRIPTION: Component that renders the footer of the web\n* ARGS_OUT: The html code that displays the foot of the web\n****/\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Alejandro Rabo y Carmen Diez :)</em>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\n\n/****\n* COMPONENT: Filter\n* ARGS_IN: filter: state variable that saves the filter string to be applied\n*          handler: event handler use to update the state of the filter variable\n* DESCRIPTION: Component that renders the html of the title filter\n* ARGS_OUT: The html code that displays the filter\n****/\nconst Filter = ({ filter, handler }) => {\n  return (\n    <div>\n        filter with book title: <input\n        value={filter}\n        onChange={handler}\n      />\n    </div>\n  )\n}\n\nexport default Filter","import React from 'react'\n\n/****\n* COMPONENT: Logout\n* ARGS_IN: handleLogout: function that handles the logout\n* DESCRIPTION: Component that renders the logout button\n* ARGS_OUT: The html code that displays the logout button\n****/\nconst Logout = ({ handleLogout }) => {\n  return(\n    <div>\n      <button onClick={() => handleLogout()}>\n        logout\n      </button>\n    </div>\n  )\n}\n\nexport default Logout","import axios from 'axios'\nconst baseUrl = '/api/login'\n\n/****\n* FUNCTION: const login = async credentials\n* ARGS_IN: credentials: Object with the username and password\n* DESCRIPTION: HTTP POST that tries to login\n* ARGS_OUT: response.data: The user retrieved from the response or an\n            error if the login fails\n****/\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\n/****\n* FUNCTION: const validToken = async (token)\n* ARGS_IN: token: token of a user\n* DESCRIPTION: Checks if the token of the user hasn't expired\n* ARGS_OUT: boolean that express the validity of the token\n****/\nconst validToken = async (token) => {\n  try {\n    const response = await axios.post(`${baseUrl}/validToken`, { 'token': token })\n    return response.data.validToken\n  } catch(error) {\n    return(false)\n  }\n}\n\nexport default { login, validToken }","import axios from 'axios'\nconst baseUrl = '/api/users'\n\n/****\n* FUNCTION: const create = async newObject\n* ARGS_IN: newObject: user to be created\n* DESCRIPTION: Create a new user\n* ARGS_OUT: Return the new user created retrieved from the backends\n****/\nconst create = async newObject => {\n  const response = await axios.post(baseUrl, newObject)\n  return response.data\n}\n\nexport default { create }\n","import React, { useState, useEffect } from 'react'\nimport Book from './components/Book'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport RegisterForm from './components/RegisterForm'\nimport Togglable from './components/Togglable'\nimport Footer from './components/Footer'\nimport Filter from './components/Filter'\nimport Logout from './components/Logout'\nimport bookService from './services/books'\nimport loginService from './services/login'\nimport ratingService from './services/ratings'\nimport userService from './services/users'\n\nconst App = () => {\n  const [books, setBooks] = useState([])\n  const [filter, setFilter] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const [name, setName] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  //Fetch all the books from the book database after the first rendering\n  useEffect(() => {\n    bookService\n      .getAll()\n      .then(initialBooks => {\n        setBooks(initialBooks)\n      })\n  }, [])\n\n  //We check if there is a valid token session after the first rendering\n  useEffect(async () => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBookappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      if (await loginService.validToken(user.token)) {\n        setUser(user)\n        ratingService.setToken(user.token)\n      } else {\n        setUser(null)\n        ratingService.setToken(null)\n      }\n    }\n  }, [])\n\n  /****\n  * FUNCTION: const handleLogin = async (event)\n  * ARGS_IN: event: event that triggered it\n  * DESCRIPTION: Tries to login with the username and password introduced.\n  *              If it works it changes the token and sets the user\n  *              Otherwise it informs that it hasn't work\n  * ARGS_OUT: -\n  ****/\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try{\n      const user = await loginService.login({\n        username, password\n      })\n\n      ratingService.setToken(user.token)\n      window.localStorage.setItem(\n        'loggedBookappUser', JSON.stringify(user)\n      )\n\n      setUser(user)\n      console.log(user)\n      setUsername('')\n      setPassword('')\n    }catch (exception) {\n      setErrorMessage('Wrong credentials')\n      console.log(user)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  /****\n  * FUNCTION: const handleRegister = async (event)\n  * ARGS_IN: event: event that triggered it\n  * DESCRIPTION: Tries to register the username with the password introduced.\n  *              If it works it changes the token and logs with the new user\n  *              Otherwise it informs that it hasn't work\n  * ARGS_OUT: -\n  ****/\n\n  const handleRegister = async (event) => {\n    event.preventDefault()\n    try {\n      await userService.create({ name, username, password })\n    } catch (exception) {\n      setErrorMessage('Something went wrong creating the user')\n      console.log(user)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n    handleLogin(event)\n  }\n\n  /****\n  * FUNCTION: const handleLogout = ()\n  * ARGS_IN: -\n  * DESCRIPTION: Logs out the user, quitting the token session.\n  * ARGS_OUT: -\n  ****/\n  const handleLogout = () => {\n    setUser(null)\n    ratingService.setToken(null)\n    window.localStorage.removeItem('loggedBookappUser')\n  }\n\n  /****\n  * FUNCTION: const handleFilterChange = (event)\n  * ARGS_IN: event: event that triggered it\n  * DESCRIPTION: Changes the value of the filter to the value of the event target\n  * ARGS_OUT: -\n  ****/\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  /****\n  * FUNCTION: const loginForm = ()\n  * ARGS_IN: -\n  * DESCRIPTION: Renders the login form and its handlers\n  * ARGS_OUT: -\n  ****/\n  const loginForm = () => (\n    <Togglable buttonLabel=\"Log In\">\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}\n      />\n    </Togglable>\n  )\n\n  /****\n  * FUNCTION: const registerForm = ()\n  * ARGS_IN: -\n  * DESCRIPTION: Renders the register form and its handlers\n  * ARGS_OUT: -\n  ****/\n  const registerForm = () => (\n    <Togglable buttonLabel=\"Register\">\n      <RegisterForm\n        username={username}\n        password={password}\n        name={name}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleNameChange={({ target }) => setName(target.value)}\n        handleSubmit={handleRegister}\n      />\n    </Togglable>\n  )\n\n  return (\n    <div>\n      <h1>Bookers</h1>\n      <Notification message={errorMessage} />\n\n      {user === null ?\n        <div>\n          {loginForm()}{registerForm()}\n        </div>\n        :\n        <div>\n          <p>Welcome {user.name}! </p>\n          <Logout handleLogout={handleLogout} />\n        </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'rated' : 'all' }\n        </button>\n      </div>\n\n      <Filter filter={filter} handler={handleFilterChange}/>\n\n      <ul>\n        {books\n          //We add the filter that selects depending on the value introduced in the form\n          .filter(book => book.name.toLowerCase().includes(filter.toLowerCase()))\n          //We add the filter that selects depending on if the user wants to see\n          //all books or only the ones rated\n          .filter(book => {\n            if(showAll){\n              return true\n            } else {\n              if(user !== null){\n                return  (book.ratings.find(rating => rating.user === user.id)) !== undefined ? true : false\n              }\n              return false\n            }\n          })\n          .map(book =>\n            <Book\n              key={book.id}\n              book={book}\n              logout={handleLogout}\n              setErrorMessage={setErrorMessage}\n              setBooks={setBooks}\n              books={books}\n            />\n          )}\n      </ul>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n// eslint-disable-next-line react/react-in-jsx-scope\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}