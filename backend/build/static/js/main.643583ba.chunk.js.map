{"version":3,"sources":["services/ratings.js","services/books.js","components/Book.js","components/Notification.js","components/LoginForm.js","components/RegisterForm.js","components/Togglable.js","components/Footer.js","components/Filter.js","components/Logout.js","services/login.js","services/users.js","App.js","index.js"],"names":["token","create","newObject","a","console","log","config","headers","Authorization","type","axios","post","response","data","undefined","error","message","setToken","newToken","baseUrl","getAll","getBook","id","reqString","Book","book","logout","setErrorMessage","setBooks","books","useState","rate","setRate","onSubmitRate","event","preventDefault","ratingService","BookId","rating","setTimeout","bookService","newBook","newBooks","map","className","name","author","year","toFixed","numRatings","onSubmit","value","onChange","target","Notification","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","RegisterForm","handleNameChange","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","children","displayName","Footer","color","fontStyle","fontSize","Filter","filter","handler","Logout","handleLogout","login","credentials","validToken","App","setFilter","showAll","setShowAll","errorMessage","setName","setUsername","setPassword","user","setUser","useEffect","then","initialBooks","loggedUserJSON","window","localStorage","getItem","JSON","parse","loginService","handleLogin","setItem","stringify","handleRegister","userService","removeItem","toLowerCase","includes","ratings","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.643583ba.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/APIGateway'\r\nlet token = null\r\n\r\n/****\r\n* FUNCTION: const setToken = newToken\r\n* ARGS_IN: newToken: new token of the user\r\n* DESCRIPTION: Set the new token of the session\r\n* ARGS_OUT: -\r\n****/\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\n/****\r\n* FUNCTION: const create = async newObject\r\n* ARGS_IN: newObject: rating object\r\n* DESCRIPTION: Create a new rating\r\n* ARGS_OUT: Return the new rating created or the error\r\n****/\r\nconst create = async newObject => {\r\n  console.log('token: ', token)\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n\r\n  //We add the type\r\n  newObject.type = 'ratings'\r\n  try {\r\n    const response = await axios.post(baseUrl, newObject, config)\r\n    console.log(response)\r\n    return response.data\r\n  } catch(error) {\r\n    if(error.response.data.error !== undefined){\r\n      return(error.response.data.error)\r\n    }else{\r\n      return(error.message)\r\n    }\r\n  }\r\n}\r\n\r\nexport default { create, setToken }","import axios from 'axios'\r\nconst baseUrl = '/APIGateway'\r\n\r\n/****\r\n* FUNCTION: const getAll = async ()\r\n* ARGS_IN: -\r\n* DESCRIPTION: HTTP POST that retrieves all the books\r\n* ARGS_OUT: response.data: The books retrieved from the response\r\n****/\r\nconst getAll = async () => {\r\n  const response = await axios.post(baseUrl,  { 'type': 'books' })\r\n  return response.data\r\n}\r\n\r\n/****\r\n* FUNCTION: const getBook = async (id)\r\n* ARGS_IN: id: id of a book\r\n* DESCRIPTION: HTTP POST that retrieves a book from the database with the id\r\n*              passed as an argument\r\n* ARGS_OUT: response.data: The book retrieved from the response\r\n****/\r\nconst getBook = async (id) => {\r\n  const reqString = `${baseUrl}`\r\n  const response = await axios.post(reqString, { 'type': 'bookByID', 'id': id })\r\n  console.log(response.data)\r\n  return response.data\r\n}\r\n\r\nexport default { getAll, getBook }\r\n","import React, { useState } from 'react'\r\nimport ratingService from '../services/ratings'\r\nimport bookService from '../services/books'\r\n\r\n/****\r\n* COMPONENT: Book\r\n* ARGS_IN: book: book that renders the component\r\n*          logout: logout function in case tokens expire\r\n*          setErrorMessage: function to display messeges in the top of the screen\r\n*          setBooks: function to update the state of the books\r\n*          books: array with all the books\r\n* DESCRIPTION: Component that renders a book and let you submit ratings.\r\n* ARGS_OUT: The html code that displays the book and the rating system\r\n****/\r\nconst Book = ({ book , logout, setErrorMessage, setBooks, books }) => {\r\n\r\n  const [rate, setRate] = useState(1)\r\n\r\n  /****\r\n  * FUNCTION: const handleRateChange = (event)\r\n  * ARGS_IN: event: event that triggered it\r\n  * DESCRIPTION: Changes the value of the rate to the value of the event target\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const handleRateChange = (event) => {\r\n    setRate(event.target.value)\r\n  }\r\n\r\n  /****\r\n  * FUNCTION: const onSubmitRate = async (event)\r\n  * ARGS_IN: event: event that triggered it\r\n  * DESCRIPTION: It adds a new rating to the book. If it is added successfully it\r\n  *              reloads the book ratings.\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const onSubmitRate = async (event) => {\r\n    event.preventDefault()\r\n    setRate(1)\r\n    const response = await ratingService.create({ BookId: book.id, rating: rate })\r\n    if(response === 'token expired'){\r\n      setErrorMessage('Session expired')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      logout()\r\n    } else if(response === 'You can\\'t rate from a mobile'){\r\n      setErrorMessage(response)\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    } else {\r\n      const newBook = await bookService.getBook(book.id)\r\n      console.log('Libro nuevo: ' , newBook, 'Libros: ',books)\r\n      const newBooks = books.map(book => {\r\n        if(book.id === newBook.id){\r\n          return newBook\r\n        }else{\r\n          return book\r\n        }\r\n      })\r\n      setBooks(newBooks)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li className='book'>\r\n      <p> Title: {book.name} </p>\r\n      <p> Author: {book.author} </p>\r\n      <p> Year of publishing: {book.year} </p>\r\n      <p> Rating: {book.rating.toFixed(1)} </p>\r\n      <p> Number ratings: {book.numRatings}  </p>\r\n\r\n      <p>\r\n        <form onSubmit={ onSubmitRate }>\r\n          <label>\r\n            Rate the book:\r\n            <select value={rate} onChange={handleRateChange}>\r\n              <option value={1}>1</option>\r\n              <option value={2}>2</option>\r\n              <option value={3}>3</option>\r\n              <option value={4}>4</option>\r\n              <option value={5}>5</option>\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </p>\r\n\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Book","import React from 'react'\r\n\r\n/****\r\n* COMPONENT: Notification\r\n* ARGS_IN: message: message to be displayed\r\n* DESCRIPTION: Component that displays a message\r\n* ARGS_OUT: The html code that displays a message\r\n****/\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/****\r\n* COMPONENT: LoginForm\r\n* ARGS_IN: handleSubmit: function that handles the login\r\n           handleUsernameChange: event handler use to update the state of the username variable\r\n           handlePasswordChange: event handler use to update the state of the password variable\r\n           username: state variable that saves the username\r\n           password: state variable that saves the password\r\n* DESCRIPTION: Component that renders login form and its handlers\r\n* ARGS_OUT: The html code that displays the login form\r\n****/\r\nconst LoginForm = ({\r\n  handleSubmit,\r\n  handleUsernameChange,\r\n  handlePasswordChange,\r\n  username,\r\n  password\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          username\r\n          <input\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          password\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  handleUsernameChange: PropTypes.func.isRequired,\r\n  handlePasswordChange: PropTypes.func.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  password: PropTypes.string.isRequired\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n/****\r\n* COMPONENT: RegisterForm\r\n* ARGS_IN: handleSubmit: function that handles the login\r\n           handleUsernameChange: event handler use to update the state of the username variable\r\n           handlePasswordChange: event handler use to update the state of the password variable\r\n           handleNameChange: event handler use to update the state of the password variable\r\n           name: state variable that saves the name\r\n           username: state variable that saves the username\r\n           password: state variable that saves the password\r\n* DESCRIPTION: Component that renders the register form and its handlers\r\n* ARGS_OUT: The html code that displays the register form\r\n****/\r\nconst RegisterForm = ({\r\n  handleSubmit,\r\n  handleUsernameChange,\r\n  handlePasswordChange,\r\n  handleNameChange,\r\n  name,\r\n  username,\r\n  password\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2>Register</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          name\r\n          <input\r\n            value={name}\r\n            onChange={handleNameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          username\r\n          <input\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          password\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">register</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nRegisterForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  handleUsernameChange: PropTypes.func.isRequired,\r\n  handlePasswordChange: PropTypes.func.isRequired,\r\n  handleNameChange: PropTypes.func.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  password: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired\r\n}\r\n\r\nexport default RegisterForm","import React, { useState, useImperativeHandle } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/****\r\n* COMPONENT: Togglable\r\n* ARGS_IN: buttonLabel: the name of the button that toggles the component\r\n* DESCRIPTION: Component to toggle other components\r\n* ARGS_OUT: The html code that let you toggle and untoggle components\r\n****/\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nTogglable.displayName = 'Togglable'\r\n\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Togglable","import React from 'react'\r\n\r\n/****\r\n* COMPONENT: Footer\r\n* ARGS_IN: -\r\n* DESCRIPTION: Component that renders the footer of the web\r\n* ARGS_OUT: The html code that displays the foot of the web\r\n****/\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Alejandro Bravo y Carmen Diez :)</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\n\r\n/****\r\n* COMPONENT: Filter\r\n* ARGS_IN: filter: state variable that saves the filter string to be applied\r\n*          handler: event handler use to update the state of the filter variable\r\n* DESCRIPTION: Component that renders the html of the title filter\r\n* ARGS_OUT: The html code that displays the filter\r\n****/\r\nconst Filter = ({ filter, handler }) => {\r\n  return (\r\n    <div>\r\n        filter with book title: <input\r\n        value={filter}\r\n        onChange={handler}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\n/****\r\n* COMPONENT: Logout\r\n* ARGS_IN: handleLogout: function that handles the logout\r\n* DESCRIPTION: Component that renders the logout button\r\n* ARGS_OUT: The html code that displays the logout button\r\n****/\r\nconst Logout = ({ handleLogout }) => {\r\n  return(\r\n    <div>\r\n      <button onClick={() => handleLogout()}>\r\n        logout\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Logout","import axios from 'axios'\r\nconst baseUrl = '/APIGateway'\r\n\r\n/****\r\n* FUNCTION: const login = async credentials\r\n* ARGS_IN: credentials: Object with the username and password\r\n* DESCRIPTION: HTTP POST that tries to login\r\n* ARGS_OUT: response.data: The user retrieved from the response or an\r\n            error if the login fails\r\n****/\r\nconst login = async credentials => {\r\n  credentials.type = 'login'\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\n/****\r\n* FUNCTION: const validToken = async (token)\r\n* ARGS_IN: token: token of a user\r\n* DESCRIPTION: Checks if the token of the user hasn't expired\r\n* ARGS_OUT: boolean that express the validity of the token\r\n****/\r\nconst validToken = async (token) => {\r\n  try {\r\n    const response = await axios.post(`${baseUrl}`, { 'token': token , 'type': 'validToken' })\r\n    return response.data.validToken\r\n  } catch(error) {\r\n    return(false)\r\n  }\r\n}\r\n\r\nexport default { login, validToken }","import axios from 'axios'\r\nconst baseUrl = '/APIGateway'\r\n\r\n/****\r\n* FUNCTION: const create = async newObject\r\n* ARGS_IN: newObject: user to be created\r\n* DESCRIPTION: Create a new user\r\n* ARGS_OUT: Return the new user created retrieved from the backends\r\n****/\r\nconst create = async newObject => {\r\n  newObject.type = 'users'\r\n  const response = await axios.post(baseUrl, newObject)\r\n  return response.data\r\n}\r\n\r\nexport default { create }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Book from './components/Book'\r\nimport Notification from './components/Notification'\r\nimport LoginForm from './components/LoginForm'\r\nimport RegisterForm from './components/RegisterForm'\r\nimport Togglable from './components/Togglable'\r\nimport Footer from './components/Footer'\r\nimport Filter from './components/Filter'\r\nimport Logout from './components/Logout'\r\nimport bookService from './services/books'\r\nimport loginService from './services/login'\r\nimport ratingService from './services/ratings'\r\nimport userService from './services/users'\r\n\r\nconst App = () => {\r\n  const [books, setBooks] = useState([])\r\n  const [filter, setFilter] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  const [name, setName] = useState('')\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n\r\n  //Fetch all the books from the book database after the first rendering\r\n  useEffect(() => {\r\n    bookService\r\n      .getAll()\r\n      .then(initialBooks => {\r\n        setBooks(initialBooks)\r\n      })\r\n  }, [])\r\n\r\n  //We check if there is a valid token session after the first rendering\r\n  useEffect(async () => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedBookappUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      if (await loginService.validToken(user.token)) {\r\n        setUser(user)\r\n        ratingService.setToken(user.token)\r\n      } else {\r\n        setUser(null)\r\n        ratingService.setToken(null)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  /****\r\n  * FUNCTION: const handleLogin = async (event)\r\n  * ARGS_IN: event: event that triggered it\r\n  * DESCRIPTION: Tries to login with the username and password introduced.\r\n  *              If it works it changes the token and sets the user\r\n  *              Otherwise it informs that it hasn't work\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    try{\r\n      const user = await loginService.login({\r\n        username, password\r\n      })\r\n\r\n      ratingService.setToken(user.token)\r\n      window.localStorage.setItem(\r\n        'loggedBookappUser', JSON.stringify(user)\r\n      )\r\n\r\n      setUser(user)\r\n      console.log(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    }catch (exception) {\r\n      setErrorMessage('Wrong credentials')\r\n      console.log(user)\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  /****\r\n  * FUNCTION: const handleRegister = async (event)\r\n  * ARGS_IN: event: event that triggered it\r\n  * DESCRIPTION: Tries to register the username with the password introduced.\r\n  *              If it works it changes the token and logs with the new user\r\n  *              Otherwise it informs that it hasn't work\r\n  * ARGS_OUT: -\r\n  ****/\r\n\r\n  const handleRegister = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      await userService.create({ name, username, password })\r\n    } catch (exception) {\r\n      setErrorMessage('Something went wrong creating the user')\r\n      console.log(user)\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n    handleLogin(event)\r\n  }\r\n\r\n  /****\r\n  * FUNCTION: const handleLogout = ()\r\n  * ARGS_IN: -\r\n  * DESCRIPTION: Logs out the user, quitting the token session.\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const handleLogout = () => {\r\n    setUser(null)\r\n    ratingService.setToken(null)\r\n    window.localStorage.removeItem('loggedBookappUser')\r\n  }\r\n\r\n  /****\r\n  * FUNCTION: const handleFilterChange = (event)\r\n  * ARGS_IN: event: event that triggered it\r\n  * DESCRIPTION: Changes the value of the filter to the value of the event target\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n\r\n  /****\r\n  * FUNCTION: const loginForm = ()\r\n  * ARGS_IN: -\r\n  * DESCRIPTION: Renders the login form and its handlers\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const loginForm = () => (\r\n    <Togglable buttonLabel=\"Log In\">\r\n      <LoginForm\r\n        username={username}\r\n        password={password}\r\n        handleUsernameChange={({ target }) => setUsername(target.value)}\r\n        handlePasswordChange={({ target }) => setPassword(target.value)}\r\n        handleSubmit={handleLogin}\r\n      />\r\n    </Togglable>\r\n  )\r\n\r\n  /****\r\n  * FUNCTION: const registerForm = ()\r\n  * ARGS_IN: -\r\n  * DESCRIPTION: Renders the register form and its handlers\r\n  * ARGS_OUT: -\r\n  ****/\r\n  const registerForm = () => (\r\n    <Togglable buttonLabel=\"Register\">\r\n      <RegisterForm\r\n        username={username}\r\n        password={password}\r\n        name={name}\r\n        handleUsernameChange={({ target }) => setUsername(target.value)}\r\n        handlePasswordChange={({ target }) => setPassword(target.value)}\r\n        handleNameChange={({ target }) => setName(target.value)}\r\n        handleSubmit={handleRegister}\r\n      />\r\n    </Togglable>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bookers</h1>\r\n      <Notification message={errorMessage} />\r\n\r\n      {user === null ?\r\n        <div>\r\n          {loginForm()}{registerForm()}\r\n        </div>\r\n        :\r\n        <div>\r\n          <p>Welcome {user.name}! </p>\r\n          <Logout handleLogout={handleLogout} />\r\n        </div>\r\n      }\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'rated' : 'all' }\r\n        </button>\r\n      </div>\r\n\r\n      <Filter filter={filter} handler={handleFilterChange}/>\r\n\r\n      <ul>\r\n        {books\r\n          //We add the filter that selects depending on the value introduced in the form\r\n          .filter(book => book.name.toLowerCase().includes(filter.toLowerCase()))\r\n          //We add the filter that selects depending on if the user wants to see\r\n          //all books or only the ones rated\r\n          .filter(book => {\r\n            if(showAll){\r\n              return true\r\n            } else {\r\n              if(user !== null){\r\n                return  (book.ratings.find(rating => rating.user === user.id)) !== undefined ? true : false\r\n              }\r\n              return false\r\n            }\r\n          })\r\n          .map(book =>\r\n            <Book\r\n              key={book.id}\r\n              book={book}\r\n              logout={handleLogout}\r\n              setErrorMessage={setErrorMessage}\r\n              setBooks={setBooks}\r\n              books={books}\r\n            />\r\n          )}\r\n      </ul>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\r\nimport App from './App.js'\r\nimport './index.css'\r\n\r\n// eslint-disable-next-line react/react-in-jsx-scope\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}